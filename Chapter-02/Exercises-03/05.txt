Referring back to the searching problem (see Exervise 2.1-3), observe that if
the sequence A is sorted, we can check the midpoint of the sequence against v
and eliminate half of the sequence from further consideration.  The binary
search algorithm repeats this procedure, halving the size of the remaining
portion of the sequence each time.  Write pseudocode, either iterative or
recursive, for binary search.  Argue that the worst-case running time of
binary search is Θ(lg n).

BINARY-SEARCH(A)
    i = A.length/2
    if v == A[i]
        return i
    else if v > A[i]
        return BINARY-SEARCH A[1..i-1]
    else
        return BINARY-SEARCH A[i+1..n]

T(n) =
    1               if n = 1
    T(n/2) + 1      if n > 1

Assumption:
    Number of recursions is (lg n + 1)

Basis:
T(1) = lg 1 + 1 = 0 + 1 = 1

Induction:
T(n)                =>
T(n/2) + 1          =>
(lg (n/2) + 1) + 1  =>
(lg n/2) + 2        =>
(lg n - lg 2) + 2   =>
(lg n - 1) + 2      =>
lg n + 1

We can ignore the lowest order term, yielding T(n) = lg n.
Therefore Θ(lg n) is the worst-case time.
