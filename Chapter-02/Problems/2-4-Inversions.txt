Let A[1..n] be an array of n distinct elements.  If i < j and A[i] > A[j],
then the pair (i, j) is called an inversion of A.

a) List the five inversions of the array 〈2, 3, 8, 6, 1〉

(2, 1) (3, 1) (8, 6) (8, 1) (6, 1)

b) What array with elements from the set 〈1, 2, ..., n〉 has the
   most inversion?

The array 〈n..1〉 has the most inversions.  It has
    (n * (n + 1)) / 2
inversions.

c) What is the relationship between the running time of insertion sort and the
   number of inversions in the input array?  Justify your answer.

The running time of the inner loop is proportional to the number of inversions
in the set and therefore the running time of insertion sort (ignoring individual
instruction time) can be expressed as (n * numberOfInversions).  This is because
the insertion sort's inner swapping loop works by swapping inversions.

d) Give an algorithm that determines the number of inversions in any permutation
   on n elements in Θ(n lg n) worst-case time. (Hint: Modify merge sort.)


